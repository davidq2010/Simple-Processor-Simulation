#ifndef AND_H_
#define AND_H_

#include "ProcessorComponent.h"
#include <bitset>

////////////////////////////////////////////////////////////////////////////////
/// @ingroup Processor
/// @brief Simple AND gate
///
/// @details
/// Input lines:
///   Input_0 [0]
///   Input_1 [1]
///
/// Output lines:
///   Result  [0]   Input_0 && Input_1
////////////////////////////////////////////////////////////////////////////////
class ANDGate : public ProcessorComponent
{
  public:

    ////////////////////////////////////////////////////////////////////////////
    /// @name Constants
    /// @{

    static const int NUM_INPUTS = 2;
    static const int NUM_OUTPUTS = 1;

    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// @name Constructor/Destructor
    /// @{

    ANDGate();

    /// @}
    ////////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////////
    /// @name Accessors/Manipulators
    /// @{

    void setInput(int _line_id, bool _bit);

    bool getOutput(int _line_id=0);

    /// @brief Updates output bits depending on ALU control code
    void updateOutputs();

    /// @}
    ////////////////////////////////////////////////////////////////////////////

  private:

    std::bitset<NUM_INPUTS>  m_inputs;  ///< Input bits
    std::bitset<NUM_OUTPUTS> m_outputs; ///< Output bits
    std::bitset<NUM_INPUTS>  m_updated_inputs;  ///< Keep track of updated inputs

    ////////////////////////////////////////////////////////////////////////////
    /// @return true if all input lines have been updated
    ////////////////////////////////////////////////////////////////////////////
    bool areAllInputsUpdated();
};

#endif // MUX_H_
